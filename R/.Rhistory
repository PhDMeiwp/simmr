model=jags.model(textConnection(modelstring), data=data)
output=coda.samples(model=model,variable.names=c("p"),n.iter=10000)
plot(output)
par(mfrow=c(2,2))
par(mar=c(2,2,2,2))
plot(output)
data(geese1demo); data(sourcesdemo); data(correctionsdemo); data(concdepdemo)
head(geese1demo)
head(geese1demo,3)
sourcesdemo
correctionsdemo
concdepdemo
data(geese1demo); data(sourcesdemo)
?siarmcmcdirichlet
?siarmcmcdirichletv4
data(correctionsdemo,concdepdemo)
data(geese1demo,sourcesdemo)
head(geese1demo,3)
sourcesdemo
data(correctionsdemo,concdepdemo)
out = siarmcmcdirichletv4(geese1demo,sourcesdemo,correctionsdemo,concdepdemo)
siarplotdata(out)
?siarmcmcdirichletv4
?siarplotdata
out$TITLE = 'Geese data'
siarplotdata(out)
apply(out_2,2,quantile,probs=c("0.025","0.50","0.975"))
str(out_2)
apply(out_2,2,quantile,probs=c(0.025,0.5,0.975))
t(round(apply(out_2,2,quantile,probs=c(0.025,0.5,0.975)),2)
t(round(apply(out_2,2,quantile,probs=c(0.025,0.5,0.975)),2))
t(round(apply(out_2,2,quantile,probs=c(0.025,0.5,0.975)),2))
out_nosig_2 = as.matrix(output_nosig[[1]])
modelstring ='
model {
for(i in 1:N) {
for(j in 1:J) {
y[i,j] ~ dnorm(inprod(p*q[,j],s[,j]+c[,j])/inprod(p,q[,j]),1/pow(sigma[j],2))
}
}
p ~ ddirch(alpha)
for(k in 1:K) {
for(j in 1:J) {
s[k,j] ~ dnorm(s_mean[k,j],s_prec[k,j])
c[k,j] ~ dnorm(c_mean[k,j],c_prec[k,j])
}
}
for(j in 1:J) { sigma[j] ~ dunif(0,0.00001) }
}
'
sources = as.matrix(sourcesdemo[,2:5])
tefs = as.matrix(correctionsdemo[,2:5])
cd = as.matrix(concdepdemo[,c(2,4)])
data=list(y=geese1demo,s_mean=sources[,c(1,3)],s_prec=1/sources[,c(2,4)]^2,
c_mean=tefs[,c(1,3)],c_prec=1/tefs[,c(2,4)]^2,
q=cd,N=nrow(geese1demo),K=nrow(sourcesdemo),
J=ncol(geese1demo),alpha=rep(1,nrow(sources)))
model=jags.model(textConnection(modelstring), data=data)
output_nosig=coda.samples(model=model,variable.names=c("p"),n.iter=10000)
```{r,include=FALSE}
modelstring ='
model {
for(i in 1:N) {
for(j in 1:J) {
y[i,j] ~ dnorm(inprod(p*q[,j],s[,j]+c[,j])/inprod(p,q[,j]),1/pow(sigma[j],2))
}
}
p ~ ddirch(alpha)
for(k in 1:K) {
for(j in 1:J) {
s[k,j] ~ dnorm(s_mean[k,j],s_prec[k,j])
c[k,j] ~ dnorm(c_mean[k,j],c_prec[k,j])
}
}
for(j in 1:J) { sigma[j] ~ dunif(0,0.001) }
}
'
sources = as.matrix(sourcesdemo[,2:5])
tefs = as.matrix(correctionsdemo[,2:5])
cd = as.matrix(concdepdemo[,c(2,4)])
data=list(y=geese1demo,s_mean=sources[,c(1,3)],s_prec=1/sources[,c(2,4)]^2,
c_mean=tefs[,c(1,3)],c_prec=1/tefs[,c(2,4)]^2,
q=cd,N=nrow(geese1demo),K=nrow(sourcesdemo),
J=ncol(geese1demo),alpha=rep(1,nrow(sources)))
model=jags.model(textConnection(modelstring), data=data)
output_nosig=coda.samples(model=model,variable.names=c("p"),n.iter=10000)
out_nosig_2 = as.matrix(output_nosig[[1]])
colnames(out_nosig_2) = sourcesdemo[,1]
t(round(apply(out_nosig_2,2,quantile,probs=c(0.025,0.5,0.975)),2))
t(round(apply(out_2,2,quantile,probs=c(0.025,0.5,0.975)),2))
siarhdrs(out)
```{r,results='hide'}
modelstring ='
model {
for(i in 1:N) {
for(j in 1:J) {
y[i,j] ~ dnorm(inprod(p*q[,j],s[,j]-c[,j])/inprod(p,q[,j]),1/pow(sigma[j],2))
}
}
p ~ ddirch(alpha)
for(k in 1:K) {
for(j in 1:J) {
s[k,j] ~ dnorm(s_mean[k,j],s_prec[k,j])
c[k,j] ~ dnorm(c_mean[k,j],c_prec[k,j])
}
}
for(j in 1:J) { sigma[j] ~ dunif(0,100) }
}
'
```
```{r,results='hide'}
modelstring ='
model {
for(i in 1:N) {
for(j in 1:J) {
y[i,j] ~ dnorm(inprod(p*q[,j],s[,j]-c[,j])/inprod(p,q[,j]),1/pow(sigma[j],2))
}
}
p ~ ddirch(alpha)
for(k in 1:K) {
for(j in 1:J) {
s[k,j] ~ dnorm(s_mean[k,j],s_prec[k,j])
c[k,j] ~ dnorm(c_mean[k,j],c_prec[k,j])
}
}
for(j in 1:J) { sigma[j] ~ dunif(0,100) }
}
'
sources = as.matrix(sourcesdemo[,2:5])
tefs = as.matrix(correctionsdemo[,2:5])
cd = as.matrix(concdepdemo[,c(2,4)])
data=list(y=geese1demo,s_mean=sources[,c(1,3)],s_prec=1/sources[,c(2,4)]^2,
c_mean=tefs[,c(1,3)],c_prec=1/tefs[,c(2,4)]^2,
q=cd,N=nrow(geese1demo),K=nrow(sourcesdemo),
J=ncol(geese1demo),alpha=rep(1,nrow(sources)))
model=jags.model(textConnection(modelstring), data=data)
output=coda.samples(model=model,variable.names=c("p"),n.iter=10000)
out_2 = as.matrix(output[[1]])
colnames(out_2) = sourcesdemo[,1]
t(round(apply(out_2,2,quantile,probs=c(0.025,0.5,0.975)),2))
str(data)
update.packages()
update.packages(ask=FALSE)
tools:::httpdPort
tools:::httpdPort()
?httpdPort
?tools:::httpdPort
?'httpdPort'
source('~/.active-rstudio-document', echo=TRUE)
?sirmcmcdirichletv4
?"siarmcmcdirichletv4"
?"siarsolomcmcv4"
geese2demo_1row = geese2demo[50,]
out_4 = siarsolomcmcv4(geese2demo_1row,sourcesdemo,correctionsdemo,concdepdemo)
geese2demo_1row = geese2demo[50,2:3]
out_4 = siarsolomcmcv4(geese2demo_1row,sourcesdemo,correctionsdemo,concdepdemo)
geese2demo_1row = as.matrix(geese2demo[50,2:3])
out_4 = siarsolomcmcv4(geese2demo_1row,sourcesdemo,correctionsdemo,concdepdemo)
data(concdepdemo)
print(concdepdemo)
str(concdepdemo)
geese2demo_1row = as.matrix(geese2demo[50,2:3])
out_4 = siarsolomcmcv4(geese2demo_1row,sourcesdemo,correctionsdemo,concdepdemo)
siarplotdata(out_4)
siarhdrs(out_4)
?"siarelicit"
siarelicit()
siarelicit(out)
siarelicit(out)
out_5 = siarmcmcdirichletv4(geese1demo,sourcesdemo,correctionsdemo,concdepdemo,prior=c(58.1,8.3,12.45,4.15))
siarhdrs(out_5)
modelstring ='
model {
# Likelihood
for(i in 1:N) {
for(j in 1:J) {
y[i,j] ~ dnorm(inprod(p[i,]*q[,j],s[,j]+c[,j])/inprod(p[i,],q[,j]),1/pow(sigma[j],2))
}
}
# Priors for sources and TEFs
for(k in 1:K) {
for(j in 1:J) {
s[k,j] ~ dnorm(s_mean[k,j],s_prec[k,j])
c[k,j] ~ dnorm(c_mean[k,j],c_prec[k,j])
}
}
for(j in 1:2) { sigma[j] ~ dunif(0,100) }
# CLR prior for dietary proportions
for(i in 1:N) {
p[i,1:K] <- expf[i,]/sum(expf[i,])
for(k in 1:K) {
expf[i,k] <- exp(f[i,k])
}
for(k in 2:(K-1)) {
f[i,k] ~ dnorm(mu_f[k],1/pow(sigma_f[k],2))
}
f[i,K] <- 0
}
# Prior for individual proportion random effects
for(k in 1:(K-1)) {
mu_f[k] ~ dnorm(0,1)
sigma_f[k] ~ dgamma(2,1)
}
}
'
data=list(y=con,s_mean=sources[,c(1,3)],s_prec=1/sources[,c(2,4)]^2,
c_mean=tefs[,c(1,3)],c_prec=1/tefs[,c(2,4)]^2,
q=cd,N=nrow(con),K=nrow(sources),
J=ncol(con))
data(geese1demo,sourcesdemo,correctionsdemo,concdepdemo)
con = geese1demo
sources = as.matrix(sourcesdemo[,2:5])
tefs = as.matrix(correctionsdemo[,2:5])
cd = as.matrix(concdepdemo[,c(2,4)])
library(siar)
data(geese1demo,sourcesdemo,correctionsdemo,concdepdemo)
con = geese1demo
sources = as.matrix(sourcesdemo[,2:5])
tefs = as.matrix(correctionsdemo[,2:5])
cd = as.matrix(concdepdemo[,c(2,4)])
rjags
library(rjags)
modelstring ='
model {
# Likelihood
for(i in 1:N) {
for(j in 1:J) {
y[i,j] ~ dnorm(inprod(p[i,]*q[,j],s[,j]+c[,j])/inprod(p[i,],q[,j]),1/pow(sigma[j],2))
}
}
# Priors for sources and TEFs
for(k in 1:K) {
for(j in 1:J) {
s[k,j] ~ dnorm(s_mean[k,j],s_prec[k,j])
c[k,j] ~ dnorm(c_mean[k,j],c_prec[k,j])
}
}
for(j in 1:2) { sigma[j] ~ dunif(0,100) }
# CLR prior for dietary proportions
for(i in 1:N) {
p[i,1:K] <- expf[i,]/sum(expf[i,])
for(k in 1:K) {
expf[i,k] <- exp(f[i,k])
}
for(k in 2:(K-1)) {
f[i,k] ~ dnorm(mu_f[k],1/pow(sigma_f[k],2))
}
f[i,K] <- 0
}
# Prior for individual proportion random effects
for(k in 1:(K-1)) {
mu_f[k] ~ dnorm(0,1)
sigma_f[k] ~ dgamma(2,1)
}
}
'
data=list(y=con,s_mean=sources[,c(1,3)],s_prec=1/sources[,c(2,4)]^2,
c_mean=tefs[,c(1,3)],c_prec=1/tefs[,c(2,4)]^2,
q=cd,N=nrow(con),K=nrow(sources),
J=ncol(con))
init = function() {
list(
'mu_f'=rnorm(data$K,0,1),
'sigma_f'=runif(data$K,0,5),
'sigma'=runif(data$J,0,2)
)
}
model_2=jags.model(textConnection(modelstring), data=data,n.chain=3,init=init)
modelstring ='
model {
# Likelihood
for(i in 1:N) {
for(j in 1:J) {
y[i,j] ~ dnorm(inprod(p[i,]*q[,j],s[,j]+c[,j])/inprod(p[i,],q[,j]),1/pow(sigma[j],2))
}
}
# Priors for sources and TEFs
for(k in 1:K) {
for(j in 1:J) {
s[k,j] ~ dnorm(s_mean[k,j],s_prec[k,j])
c[k,j] ~ dnorm(c_mean[k,j],c_prec[k,j])
}
}
for(j in 1:2) { sigma[j] ~ dunif(0,100) }
# CLR prior for dietary proportions
for(i in 1:N) {
p[i,1:K] <- expf[i,]/sum(expf[i,])
for(k in 1:K) {
expf[i,k] <- exp(f[i,k])
}
for(k in 1:(K-1)) {
f[i,k] ~ dnorm(mu_f[k],1/pow(sigma_f[k],2))
}
f[i,K] <- 0
}
# Prior for individual proportion random effects
for(k in 1:(K-1)) {
mu_f[k] ~ dnorm(0,1)
sigma_f[k] ~ dgamma(2,1)
}
}
'
data=list(y=con,s_mean=sources[,c(1,3)],s_prec=1/sources[,c(2,4)]^2,
c_mean=tefs[,c(1,3)],c_prec=1/tefs[,c(2,4)]^2,
q=cd,N=nrow(con),K=nrow(sources),
J=ncol(con))
init = function() {
list(
'mu_f'=rnorm(data$K,0,1),
'sigma_f'=runif(data$K,0,5),
'sigma'=runif(data$J,0,2)
)
}
model_2=jags.model(textConnection(modelstring), data=data,n.chain=3,init=init)
init = function() {
list(
'mu_f'=rnorm(data$K-1,0,1),
'sigma_f'=runif(data$K-1,0,5),
'sigma'=runif(data$J,0,2)
)
}
model_2=jags.model(textConnection(modelstring), data=data,n.chain=3,init=init)
output=coda.samples(model=model_2,variable.names=c('p','sigma'),n.iter=100000,thin=100)
gelman.diag(output,multivariate=FALSE)
dic.samples(model=model_2,n.iter=100000,thin=100,type='pD')
output=coda.samples(model=model_2,variable.names=c('f','p','sigma'),n.iter=100000,thin=100)
gelman.diag(output,multivariate=FALSE)
dic.samples(model=model_2,n.iter=100000,thin=100,type='pD')
modelstring ='
model {
# Likelihood
for(i in 1:N) {
for(j in 1:J) {
y[i,j] ~ dnorm(inprod(p[i,]*q[,j],s[,j]+c[,j])/inprod(p[i,],q[,j]),1/pow(sigma[j],2))
}
}
# Priors for sources and TEFs
for(k in 1:K) {
for(j in 1:J) {
s[k,j] ~ dnorm(s_mean[k,j],s_prec[k,j])
c[k,j] ~ dnorm(c_mean[k,j],c_prec[k,j])
}
}
for(j in 1:2) { sigma[j] ~ dunif(0,100) }
# CLR prior for dietary proportions
for(i in 1:N) {
p[i,1:K] <- expf[i,]/sum(expf[i,])
for(k in 1:K) {
expf[i,k] <- exp(f[i,k])
f[i,k] ~ dnorm(mu_f[k],1/pow(sigma_f[k],2))
}
}
# Prior for individual proportion random effects
for(k in 1:K) {
mu_f[k] ~ dnorm(0,1)
sigma_f[k] ~ dgamma(2,1)
}
}
'
data=list(y=con,s_mean=sources[,c(1,3)],s_prec=1/sources[,c(2,4)]^2,
c_mean=tefs[,c(1,3)],c_prec=1/tefs[,c(2,4)]^2,
q=cd,N=nrow(con),K=nrow(sources),
J=ncol(con))
init = function() {
list(
'mu_f'=rnorm(data$K-1,0,1),
'sigma_f'=runif(data$K-1,0,5),
'sigma'=runif(data$J,0,2)
)
}
model_2=jags.model(textConnection(modelstring), data=data,n.chain=3,init=init)
output=coda.samples(model=model_2,variable.names=c('f','p','sigma'),n.iter=100000,thin=100)
data=list(y=con,s_mean=sources[,c(1,3)],s_prec=1/sources[,c(2,4)]^2,
c_mean=tefs[,c(1,3)],c_prec=1/tefs[,c(2,4)]^2,
q=cd,N=nrow(con),K=nrow(sources),
J=ncol(con))
# init = function() {
#   list(
#     'mu_f'=rnorm(data$K-1,0,1),
#     'sigma_f'=runif(data$K-1,0,5),
#     'sigma'=runif(data$J,0,2)
#   )
# }
model_2=jags.model(textConnection(modelstring), data=data,n.chain=3)#,init=init)
output=coda.samples(model=model_2,variable.names=c('f','p','sigma'),n.iter=100000,thin=100)
gelman.diag(output,multivariate=FALSE)
dic.samples(model=model_2,n.iter=100000,thin=100,type='pD')
dic.samples(model=model_1,n.iter=10000,thin=10)
source('~/.active-rstudio-document', echo=TRUE)
?dic.samples
source('~/.active-rstudio-document', echo=TRUE)
dic.samples(model=model_1,n.iter=10000,thin=10)
dic.samples(model=model_2,n.iter=10000,thin=10,type='popt')
dic.samples(model=model_1,n.iter=10000,thin=10,type='popt')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Dropbox/Rfiles/Sandbox/Learning_Factory/tool_wear_change_point_model.R')
model=jags.model(textConnection(modelstring), data=data)
model=jags.model(textConnection(model_string), data=data)
source('~/Dropbox/Rfiles/Sandbox/Learning_Factory/tool_wear_change_point_model.R')
model=jags.model(textConnection(model_string), data=data)
source('~/Dropbox/Rfiles/Sandbox/Learning_Factory/tool_wear_change_point_model.R')
model=jags.model(textConnection(model_string), data=data)
source('~/Dropbox/Rfiles/Sandbox/Learning_Factory/tool_wear_change_point_model.R')
model=jags.model(textConnection(model_string), data=data)
source('~/Dropbox/Rfiles/Sandbox/Learning_Factory/tool_wear_change_point_model.R')
model=jags.model(textConnection(model_string), data=data)
source('~/Dropbox/Rfiles/Sandbox/Learning_Factory/tool_wear_change_point_model.R')
model=jags.model(textConnection(model_string), data=data)
output=coda.samples(model=model,variable.names=c('gamma_1','gamma_2','sigma','beta'),n.iter=1000)
source('~/Dropbox/Rfiles/Sandbox/Learning_Factory/tool_wear_change_point_model.R')
output=coda.samples(model=model,variable.names=c('gamma','sigma','beta'),n.iter=1000)
gelman.diag(output)
plot(output)
summary(output)
gamma_1
gamma_2
sigma
beta
source('~/Dropbox/Rfiles/Sandbox/Learning_Factory/tool_wear_change_point_model.R')
gelman.diag(output,multivariate=FALSE)
plot(output)
summary(output) # These should match the true values from which the data were generated above closely
plot(t,y)
plot(t,y)
# Get the posterior means of everything
y_pred = vector(NA,length=N)
gamma_1_mean = summary(output)$statistics[4,1]
gamma_2_mean = summary(output)$statistics[5,1]
beta_mean = summary(output)$statistics[2,1]
y_pred[t<=gamma_1_mean] = 0
y_pred[t>gamma_2_mean] = 0
y_pred[t<=gamma_2_mean & t>gamma_1_mean] = beta_mean*(t[t<=gamma_2_mean & t>gamma_1_mean]-gamma_1_mean)
y_pred = vector(length=N)
gamma_1_mean = summary(output)$statistics[4,1]
gamma_2_mean = summary(output)$statistics[5,1]
beta_mean = summary(output)$statistics[2,1]
y_pred[t<=gamma_1_mean] = 0
y_pred[t>gamma_2_mean] = 0
y_pred[t<=gamma_2_mean & t>gamma_1_mean] = beta_mean*(t[t<=gamma_2_mean & t>gamma_1_mean]-gamma_1_mean)
lines(t,y_pred,col='red',lwd=3)
par(mar=c(3,3,2,1), mgp=c(2,.7,0), tck=-.01,las=1)
plot(t,y)
# Get the posterior means of everything
y_pred = vector(length=N)
gamma_1_mean = summary(output)$statistics[4,1]
gamma_2_mean = summary(output)$statistics[5,1]
beta_mean = summary(output)$statistics[2,1]
y_pred[t<=gamma_1_mean] = 0
y_pred[t>gamma_2_mean] = 0
y_pred[t<=gamma_2_mean & t>gamma_1_mean] = beta_mean*(t[t<=gamma_2_mean & t>gamma_1_mean]-gamma_1_mean)
lines(t,y_pred,col='red',lwd=3) # Perfect!
rm(list=ls())
setwd("~/Dropbox/Rfiles/simmr/simmr/R")
#setwd("/Volumes/MacintoshHD2/Dropbox/Rfiles/simmr/simmr/R")
source('simmr_load.R')
source('print.simmr_input.R')
source('plot.simmr_input.R')
source('simmr_elicit.R')
source('simmr_mcmc.R')
source('print.simmr_output.R')
source('summary.simmr_output.R')
source('plot.simmr_output.R')
library(rjags) # Just jags.model and coda.samples
library(ggplot2) # Lots of this
library(compositions) # Just clrInv
library(boot) # Just logit
library(coda) # Just summary.mcmc.list
library(reshape2) # Just melt
library(MASS) # Just kde2d
library(graphics)
library(stats)
mix = matrix(c(-10.13, -10.72, -11.39, -11.18, -10.81, -10.7, -10.54,
-10.48, -9.93, -9.37, 11.59, 11.01, 10.59, 10.97, 11.52, 11.89,
11.73, 10.89, 11.05, 12.3), ncol=2, nrow=10)
colnames(mix) = c('d13C','d15N')
s_names=c('Source A','Source B','Source C','Source D')
s_means = matrix(c(-14, -15.1, -11.03, -14.44, 3.06, 7.05, 13.72, 5.96), ncol=2, nrow=4)
s_sds = matrix(c(0.48, 0.38, 0.48, 0.43, 0.46, 0.39, 0.42, 0.48), ncol=2, nrow=4)
c_means = matrix(c(2.63, 1.59, 3.41, 3.04, 3.28, 2.34, 2.14, 2.36), ncol=2, nrow=4)
c_sds = matrix(c(0.41, 0.44, 0.34, 0.46, 0.46, 0.48, 0.46, 0.66), ncol=2, nrow=4)
conc = matrix(c(0.02, 0.1, 0.12, 0.04, 0.02, 0.1, 0.09, 0.05), ncol=2, nrow=4)
simmr_1 = simmr_load(mixtures=mix,
source_names=s_names,
source_means=s_means,
source_sds=s_sds,
correction_means=c_means,
correction_sds=c_sds,
concentration_means = conc)
# Plot
plot(simmr_1)
# Print
simmr_1
# MCMC run
simmr_1_out = simmr_mcmc(simmr_1)
print(simmr_1_out)
summary(simmr_1_out)
summary(simmr_1_out,type='diagnostics')
summary(simmr_1_out,type='correlations')
summary(simmr_1_out,type='statistics')
ans = summary(simmr_1_out,type=c('quantiles','statistics'))
plot(simmr_1_out)
plot(simmr_1_out,type='boxplot')
plot(simmr_1_out,type='histogram')
plot(simmr_1_out,type='density')
plot(simmr_1_out,type='matrix')
source('~/.active-rstudio-document', echo=TRUE)
library(simmr)
plot(simmr_out,type='matrix')
library(MASS)
kde2d
